  [
      {
        "title": "Introduction to init() in Go",
        "content": "**`init()`** is a special function in Go that runs **before the `main()` function**.\n\nIt is commonly used for:\n\n- Package-level initialization\n- Setting up resources or configurations\n- Running code automatically during program startup",
        "slide_type": "text"
      },
      {
        "title": "When is init() Executed?",
        "content": "The `init()` function is automatically executed:\n\n- **After all variable declarations** in the package\n- **Before the `main()` function**\n- For each package, **`init()` runs once**\n- Order of execution: **imported packages' `init()` → current package `init()` → `main()`**",
        "slide_type": "text"
      },
      {
        "title": "init() Syntax Example",
        
        "content": "package main\n\nimport \"fmt\"\n\nfunc init() {\n    fmt.Println(\"Init function is running...\")\n}\n\nfunc main() {\n    fmt.Println(\"Main function is running...\")\n}",
        "slide_type": "code"
      },
      {
        "title": "Multiple init() Functions",
        "content": "A single Go file or package **can have multiple `init()` functions**. They are executed in the order they appear in the file.",
        "slide_type": "text"
      },
      {
        "title": "Multiple init() Example",
        "content": "package main\n\nimport \"fmt\"\n\nfunc init() {\n    fmt.Println(\"Init #1\")\n}\n\nfunc init() {\n    fmt.Println(\"Init #2\")\n}\n\nfunc main() {\n    fmt.Println(\"Main\")\n}",
        "slide_type": "code"
      },
      {
        "title": "init() vs main()",
        "content": [
          {
            "Function": "init()",
            "Called By": "Go runtime",
            "Arguments": "None",
            "Return Type": "None",
            "Purpose": "Initialize the package"
          },
          {
            "Function": "main()",
            "Called By": "Go runtime",
            "Arguments": "None",
            "Return Type": "None",
            "Purpose": "Entry point of the application"
          }
        ],
        "slide_type": "table"
      },
      {
        "title": "Use Cases of init()",
        "content": "- Loading config files\n- Registering plugins\n- Validating environment variables\n- Setting default values\n- Establishing initial connections",
        "slide_type": "text"
      },
      {
        "title": "Best Practices for init()",
        "content": "- Avoid complex logic in `init()`\n- Do not use it for critical business logic\n- Keep `init()` minimal and clear\n- Prefer explicit initialization in `main()` when possible",
        "slide_type": "text"
      }
    ]
    
    


  You are given a JSON array of slide objects. Each object contains:
  - "title": which may have markdown formatting (like **bold**)
  - "content": which may include markdown headers (like ###, ##)

  Your task is to:
  1. Strip all markdown formatting (such as **, *, ###, etc.) from both fields.
  2. From the "content" field, extract plain text and assign it to "slide_topic".
  3. From the "title" field, extract plain text and assign it to "title_text".
  4. In "title_text", remove all non-alphabetic characters (keep only letters A–Z and a–z, and allow spaces).
  5. Discard the rest of the fields.

  Return a new JSON array where each object has only:
  - "slide_topic": Use the first column (from content field)
  - "title_text": Use the second column (from title field, alphabets and spaces only).

  The result should be clean, plain-text only, and formatted as a JSON array.
  please make sure that it's seo optimized and become viral